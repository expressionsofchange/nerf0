>>> from hashstore import NoutHashStore
>>> from memoization import Stores, Memoization
>>>
>>> from dsn.s_expr.clef import BecomeNode, TextBecome, Delete
>>> from dsn.s_expr.construct_y import construct_y_from_scratch
>>> from dsn.s_expr.h_utils import view_past_from_present, ALIVE_AND_WELL, DEAD, DELETED
>>> from dsn.s_expr.legato import NoteNout, NoteCapo, NoteNoutHash
>>> from dsn.s_expr.test_utils import iinsert, rreplace
>>> from dsn.s_expr.utils import nouts_for_notes_da_capo
>>> from dsn.historiography.legato import HistoriographyNoteNoutHash, HistoriographyNoteNout, HistoriographyNoteCapo, HistoriographyNoteSlur
>>> from dsn.historiography.clef import SetNoteNoutHash
>>>
>>>
>>> def print_aliveness(steps, indentation):
...     d = {ALIVE_AND_WELL: "ALIVE", DEAD: "DEAD", DELETED: "DELETED"}
...     for (nout_hash, dissonant, aliveness, rhi) in steps:
...         print(indentation * " ", nout_hash, dissonant, d[aliveness])
...         print_aliveness(rhi.children_steps, indentation + 4)
...
>>>
>>> p = NoutHashStore(NoteNoutHash, NoteNout, NoteCapo)
>>> historiography_note_nout_store = NoutHashStore(HistoriographyNoteNoutHash, HistoriographyNoteNout, HistoriographyNoteCapo)
>>> stores = Stores(p, historiography_note_nout_store)
>>> m = Memoization()
>>> 
>>>
>>> capo = NoteCapo()
>>> hash_capo = p.add(capo)
>>>
>>> for nh in nouts_for_notes_da_capo([
...     BecomeNode(),
...     iinsert(p, 0, [TextBecome("a")]),
...     Delete(0),
...     iinsert(p, 0, [TextBecome("b")]),
...     rreplace(p, 0, [TextBecome("c")]),
...     Delete(44),
...         ]):
...     h = p.add(nh.nout)
...
>>>

>>> historiography_note_nout = HistoriographyNoteSlur(
...     SetNoteNoutHash(nh.nout_hash),
...     HistoriographyNoteNoutHash.for_object(HistoriographyNoteCapo()),
... )

>>> result = view_past_from_present(m, stores,
...     historiography_note_nout,
...     nh.nout_hash,
...     )
>>>
>>> print_aliveness(result, 0)
 437ba946fac9 False ALIVE
 1e2072cbda0a False ALIVE
     1f2cf5ca7d0d False DELETED
 a61033ea6ed5 False ALIVE
 cee6a1b4f69d False ALIVE
     81e6591ff251 False DEAD
 a4221607ce2f False ALIVE
     eb55a8e79763 False ALIVE
 b27d46cb09c9 True ALIVE
>>>
>>>
>>> for nh in nouts_for_notes_da_capo([
...     BecomeNode(),
...     iinsert(p, 0, [
...         BecomeNode(),
...         iinsert(p, 0, [TextBecome("a")]),  # dead branch inside a deletion.
...         rreplace(p, 0, [TextBecome("b")]),
...         ]),
...     Delete(0),
...     iinsert(p, 0, [
...         BecomeNode(),
...         iinsert(p, 0, [TextBecome("c")]),  # deletion inside a dead branch
...         Delete(0),
...         ]),
...     rreplace(p, 0, [TextBecome("d")]),
...         ]):
...     h = p.add(nh.nout)
...
>>>
>>> historiography_note_nout = HistoriographyNoteSlur(
...     SetNoteNoutHash(nh.nout_hash),
...     HistoriographyNoteNoutHash.for_object(HistoriographyNoteCapo()),
... )

>>> result = view_past_from_present(m, stores,
...     historiography_note_nout,
...     nh.nout_hash,
...     )
>>>
>>> print_aliveness(result, 0)
 437ba946fac9 False ALIVE
 86a9c0524f6a False ALIVE
     437ba946fac9 False DELETED
     1e2072cbda0a False DELETED
         1f2cf5ca7d0d False DELETED
     adeed147f2ba False DELETED
         81e6591ff251 False DELETED
 99736566599a False ALIVE
 498f55e1634e False ALIVE
     437ba946fac9 False DEAD
     27fd056c857b False DEAD
         eb55a8e79763 False DEAD
     4458034eb170 False DEAD
 f8f0af43092f False ALIVE
     ce5616f8605c False ALIVE
