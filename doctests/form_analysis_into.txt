>>> from hashstore import NoutHashStore
>>> from memoization import Stores, Memoization
>>>
>>> from dsn.s_expr.clef import BecomeNode, TextBecome, Delete
>>> from dsn.s_expr.legato import NoteNout, NoteCapo, NoteNoutHash
>>> from dsn.s_expr.test_utils import iinsert, rreplace
>>> from dsn.s_expr.utils import nouts_for_notes_da_capo
>>> from dsn.form_analysis.into import construct_form_note
>>> from dsn.historiography.legato import HistoriographyNoteNoutHash, HistoriographyNoteNout, HistoriographyNoteCapo
>>>
>>>
>>> # TODO: Factor out mechanisms to create these more easily in tests
>>> p = NoutHashStore(NoteNoutHash, NoteNout, NoteCapo)
>>> historiography_note_nout_store = NoutHashStore(HistoriographyNoteNoutHash, HistoriographyNoteNout, HistoriographyNoteCapo)
>>> stores = Stores(p, historiography_note_nout_store)
>>>
>>> m = Memoization()
>>> capo = NoteCapo()
>>> hash_capo = p.add(capo)
>>>
>>> for nh in nouts_for_notes_da_capo([
...     BecomeNode(),
...         ]):
...     h = p.add(nh.nout)
...
>>> a, b = construct_form_note(m, stores, h)
>>> type(a).__name__
'BecomeMalformed'

>>> for nh in nouts_for_notes_da_capo([
...     BecomeNode(),
...     iinsert(p, 0, [TextBecome("quote")]),
...     iinsert(p, 1, [TextBecome("a")]),
...     rreplace(p, 1, [TextBecome("b")]),
...         ]):
...     h = p.add(nh.nout)

>>> a, b = construct_form_note(m, stores, h)
>>> for n in reversed([tup.nout.note for tup in  stores.form_note_nout.all_nhtups_for_nout_hash(b)]):
...     print(type(n).__name__)
BecomeMalformed
BecomeMalformed
BecomeQuote
ChangeQuote

>>> for nh in nouts_for_notes_da_capo([
...     BecomeNode(),
...     iinsert(p, 0, [TextBecome("define")]),
...     iinsert(p, 1, [TextBecome("a")]),
...     iinsert(p, 2, [TextBecome("0")]),
...         ]):
...     h = p.add(nh.nout)

>>> a, b = construct_form_note(m, stores, h)
>>> type(a).__name__
'BecomeDefine'

>>> for nh in nouts_for_notes_da_capo([
...     BecomeNode(),
...     iinsert(p, 0, [TextBecome("define")]),
...     iinsert(p, 1, [TextBecome("a")]),
...     iinsert(p, 2, [TextBecome("0")]),
...     rreplace(p, 2, [TextBecome("1")]),
...         ]):
...     h = p.add(nh.nout)

>>> a, b = construct_form_note(m, stores, h)
>>> type(a).__name__
'DefineChangeDefinition'


>>> for nh in nouts_for_notes_da_capo([
...     BecomeNode(),
...     iinsert(p, 0, [TextBecome("+")]),
...     iinsert(p, 1, [TextBecome("0")]),
...     rreplace(p, 0, [TextBecome("-")]),
...         ]):
...     h = p.add(nh.nout)

>>> a, b = construct_form_note(m, stores, h)
>>> for n in reversed([tup.nout.note for tup in  stores.form_note_nout.all_nhtups_for_nout_hash(b)]):
...     print(type(n).__name__)
BecomeMalformed
BecomeApplication
ApplicationChangeParameters
ApplicationChangeProcedure



>>> for nh in nouts_for_notes_da_capo([
...     BecomeNode(),
...     iinsert(p, 0, [TextBecome("if")]),
...     iinsert(p, 1, [TextBecome("true")]),
...     iinsert(p, 2, [TextBecome("1")]),
...     iinsert(p, 3, [TextBecome("2")]),
...     rreplace(p, 2, [TextBecome("9")]),
...     rreplace(p, 1, [TextBecome("false")]),
...         ]):
...     h = p.add(nh.nout)

>>> a, b = construct_form_note(m, stores, h)
>>> for n in reversed([tup.nout.note for tup in  stores.form_note_nout.all_nhtups_for_nout_hash(b)]):
...     print(type(n).__name__)
BecomeMalformed
BecomeMalformed
BecomeMalformed
BecomeMalformed
BecomeIf
ChangeIfConsequent
ChangeIfPredicate


>>> for nh in nouts_for_notes_da_capo([
...     BecomeNode(),
...     iinsert(p, 0, [TextBecome("lambda")]),
...     iinsert(p, 1, [BecomeNode(),
...                    iinsert(p, 0, [TextBecome("a")])
...                    ]),
...     iinsert(p, 2, [TextBecome("a")]),
...     rreplace(p, 2, [TextBecome("b")]),
...     rreplace(p, 1, [BecomeNode(),
...                    iinsert(p, 0, [TextBecome("b")])
...                    ]),
...         ]):
...     h = p.add(nh.nout)

>>> a, b = construct_form_note(m, stores, h)
>>> for n in reversed([tup.nout.note for tup in  stores.form_note_nout.all_nhtups_for_nout_hash(b)]):
...     print(type(n).__name__)
BecomeMalformed
BecomeMalformed
BecomeMalformed
BecomeLambda
LambdaChangeBody
LambdaChangeParameters


>>> for nh in nouts_for_notes_da_capo([
...     BecomeNode(),
...     iinsert(p, 0, [TextBecome("begin")]),
...     iinsert(p, 1, [TextBecome("a")]),
...     iinsert(p, 2, [TextBecome("b")]),
...         ]):
...     h = p.add(nh.nout)

>>> a, b = construct_form_note(m, stores, h)
>>> for n in reversed([tup.nout.note for tup in  stores.form_note_nout.all_nhtups_for_nout_hash(b)]):
...     print(type(n).__name__)
BecomeMalformed
BecomeMalformed
BecomeSequence
ChangeSequence
