>>> from dsn.s_expr.clef import BecomeNode, TextBecome, Insert, Replace, Delete
>>> from dsn.s_expr.structure import TreeNode, TreeText
>>> from dsn.s_expr.construct_x import x_note_play
>>> from dsn.s_expr.legato import NoteNoutHash
>>> 
>>> metadata = 'ignored for these tests'
>>> hash = NoteNoutHash._for_bytes(b'')
>>> 
>>> test_tree = TreeNode([
...     TreeNode([
...         TreeText('original', 'metadata'),
...     ], [0], [0], 'metadata'),
... ], [0], [0], 'metadata')
>>> 

The parameter `recurse` is used to construct arbitrary sub-histories. It's useful in testing; we can simply
mock "don't call", "successful call" and "dissonant".

>>> def do_no_recurse(nout_hash):
...     raise Exception("Do _not_ recurse")  # i.e. this is unexpected for this note
... 
>>> def recurse_success(nout_hash):
...     return TreeNode([], [], [], metadata)
... 
>>> def recurse_dissonant(nout_hash):
...     return recurse_success(nout_hash).broken_equivalent(metadata)

>>> def show(*args):
...     result = x_note_play(*args)
...     return result, result.broken

Normal usages:

>>> show(BecomeNode(), None, do_no_recurse, metadata)
((), False)
>>> show(TextBecome("foo"), None, do_no_recurse, metadata)
(foo, False)
>>> show(Delete(0), test_tree, do_no_recurse, metadata)
((), False)
>>> show(Insert(0, hash), test_tree, recurse_success, metadata)
((() (original)), False)
>>> show(Insert(1, hash), test_tree, recurse_success, metadata)
(((original) ()), False)
>>> show(Replace(0, hash), test_tree, recurse_success, metadata)
((()), False)

# Out of range failures:

>>> show(Delete(1), test_tree, do_no_recurse, metadata)
(((original)), True)
>>> show(Insert(2, hash), test_tree, recurse_success, metadata)
(((original)), True)
>>> show(Replace(1, hash), test_tree, recurse_success, metadata)
(((original)), True)
>>> 

Recursive failures:
just because there was a failure _somewhere_ in the chain doesn't mean the top-level is broken

>>> show(Insert(0, hash), test_tree, recurse_dissonant, metadata)
((() (original)), False)
>>> show(Replace(0, hash), test_tree, recurse_dissonant, metadata)
((()), False)

Recursive failures: there is no downward propagation.
As it stands, errors are not propagated downwards to the children. i.e. just because there was an error somewhere
in the construction of a node, does not means all its children get marked as dissonant.

Whether this is the right decision is still a bit of a question to me. The underlying point is: once a node is
dissonent, all bets are off, so there are no further updates on the nodes' children from that point onwards.

You could argue both ways here:
* No propagation: the construction of the children, as far as we got with it, is in itself not broken.
    * counterpoint: "as far as we got" is also what we show on the parent, so that in itself is not really an excuse.

* Propagation: because the parent is broken, no further updates are done on the children. So the children you're
    seeing are only updated to the point of the breakage. Not fully updated should be displayed as broken.

Recursive failures, downward propagation behavior is not tested yet.
