>>> from hashstore import HashStore
>>> from legato import Nout, NoutCapo, all_preceding_nout_hashes
>>> 
>>> from dsn.s_expr.clef import BecomeNode, TextBecome, Delete
>>> from dsn.s_expr.construct_y import construct_y_from_scratch
>>> from dsn.s_expr.legato import parse_nout
>>> from dsn.s_expr.test_utils import iinsert, rreplace
>>> from dsn.s_expr.utils import nouts_for_notes_da_capo
>>> 

The structure of Nouts & Notes below matches the drawing in green in the blue booklet of my private notes.

>>> p = HashStore(Nout, parse_nout)
>>> 
>>> capo = NoutCapo()
>>> hash_capo = p.add(capo)
>>> 
>>> for nh in nouts_for_notes_da_capo([
...     BecomeNode(),
...     iinsert(p, 0, [BecomeNode(),
...                    iinsert(p, 0, [TextBecome("a")])
...                    ]),
...     rreplace(p, 0, [BecomeNode(),
...                     iinsert(p, 0, [TextBecome("b")])
...                     ]),
...         ]):
...     h = p.add(nh.nout)

>>> tree, historiography_at, annotated_hashes = construct_y_from_scratch(p, nh.nout_hash) 
>>> 
>>> def steps_recursively(indentation, annotated_hashes):
...     for nout_hash, dissonant, rhi in annotated_hashes:
...         print(" " * indentation, nout_hash)
...         if rhi is not None:
...             t_address, children_steps = rhi
...             steps_recursively(indentation + 4, children_steps)
... 

Though a bit obfuscated w/ all the hashes, the below shows us at least: that the second usage of "BecomeNode" is not 
repeated (25bc3c945eb5 is not preceded by 437ba946fac9). This is because it's not new.

>>> steps_recursively(0, annotated_hashes)
 437ba946fac9
 3f888761eecb
     437ba946fac9
     1e2072cbda0a
         1f2cf5ca7d0d
 afeab8636e2b
     25bc3c945eb5
         81e6591ff251

>>> tree.historiographies[0].nout_hash()
25bc3c945eb5

So, what's actually alive at "level 1"?

>>> list(all_preceding_nout_hashes(p, tree.historiographies[0].nout_hash()))
[25bc3c945eb5, 437ba946fac9]

Note that there is no historiography that contains the node for the Text "a" (1f2cf5ca7d0d); this is a consequence of
(and OK because of) the fact that 1e2072cbda0a is not alive.


## Breaking stuff

Now we make something similar, but start off our history in a broken state (delete at an unknown address)


>>> for nh in nouts_for_notes_da_capo([
...     BecomeNode(),
...     Delete(44),
...     rreplace(p, 0, [BecomeNode(),
...                     iinsert(p, 0, [TextBecome("b")])
...                     ]),
...         ]):
...     h = p.add(nh.nout)
>>> 
>>> tree, historiography_at, annotated_hashes = construct_y_from_scratch(p, nh.nout_hash)
>>> 

The result: notes that follow a broken action are still converted into steps, but not recursively explored.
The reasoning is: after breakage, all bets are off (but you still want to display as much info as possible)

In fact, at least theoretically, we can do even slightly better. The only thing we _cannot_ do after breakage is keep
updating Historiographies (we wouldn't know which one to update). But the recursive information is an history on its
own, independent of its parent, so we could display it just fine.

However, once you don't update Historiographies, the information on the recursive level becomes extremely verbose:
because you refuse to make statements about how it's connected to the past, you must show the whole history again and
again for each node. This defeats the purpose of construct_y; therefore, we will stick with "once you're in a broken
state, don't show any recursive information".


>>> steps_recursively(0, annotated_hashes)
 437ba946fac9
 a59aeef1b49b
 436373b77a49


What about breakage in dead branches of history? This does not affect live branches.

A somewhat related remark is: A dissonent _does not_ break its parent: the parent's indexing scheme is still good, and
all actions in other subtrees are independent.


>>> for nh in nouts_for_notes_da_capo([
...     BecomeNode(),
...     iinsert(p, 0, [BecomeNode(),
...                    Delete(44)]),
...     rreplace(p, 0, [BecomeNode(),
...                     iinsert(p, 0, [TextBecome("b")]),
...                     ]),
...         ]):
...     h = p.add(nh.nout)

>>> tree, historiography_at, annotated_hashes = construct_y_from_scratch(p, nh.nout_hash)
>>> steps_recursively(0, annotated_hashes)
 437ba946fac9
 bbe8355a0520
     437ba946fac9
     a59aeef1b49b
 fe392466c909
     25bc3c945eb5
         81e6591ff251

