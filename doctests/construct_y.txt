>>> from hashstore import HashStore
>>> from legato import parse_nout, NoutBlock, NoutBegin, all_preceding_nout_hashes
>>> from clef import BecomeNode, TextBecome, Insert, Replace
>>> from construct_y import construct_y_from_scratch
>>> 
>>> possible_timelines = HashStore(parse_nout)
>>> 

The structure of Nouts & Notes below matches the drawing in green in the blue booklet of my private notes.

>>> begin = NoutBegin()
>>> hash_begin = possible_timelines.add(begin)
>>> 
>>> hash_node = possible_timelines.add(NoutBlock(BecomeNode(), hash_begin))
>>> 
>>> hash_a = possible_timelines.add(NoutBlock(TextBecome("a"), hash_begin))
>>> hash_insert_0a = possible_timelines.add(NoutBlock(Insert(0, hash_a), hash_node))
>>> hash_insert_00a = possible_timelines.add(NoutBlock(Insert(0, hash_insert_0a), hash_node))
>>> 
>>> hash_b = possible_timelines.add(NoutBlock(TextBecome("b"), hash_begin))
>>> hash_insert_0b = possible_timelines.add(NoutBlock(Insert(0, hash_b), hash_node))
>>> hash_replace_00b = possible_timelines.add(NoutBlock(Replace(0, hash_insert_0b), hash_insert_00a))
>>> 
>>> tree, historiography_at, per_step_info = construct_y_from_scratch(possible_timelines, hash_replace_00b)
>>> 
>>> def steps_recursively(indentation, per_step_info):
...     for nout_hash, rhi in per_step_info:
...         print(" " * indentation, nout_hash)
...         if rhi is not None:
...             t_address, children_steps = rhi
...             steps_recursively(indentation + 4, children_steps)
... 

Though a bit obfuscated w/ all the hashes, the below shows us at least: that the second usage of "BecomeNode" is not 
repeated (25bc3c945eb5 is not preceded by 437ba946fac9). This is because it's not new.

>>> steps_recursively(0, per_step_info)
 437ba946fac9
 3f888761eecb
     437ba946fac9
     1e2072cbda0a
         1f2cf5ca7d0d
 afeab8636e2b
     25bc3c945eb5
         81e6591ff251

>>> tree.historiographies[0].nout_hash()
25bc3c945eb5

So, what's actually alive at "level 1"?

>>> list(all_preceding_nout_hashes(possible_timelines, tree.historiographies[0].nout_hash()))
[25bc3c945eb5, 437ba946fac9]

Note that there is no historiography that contains the node for the Text "a" (1f2cf5ca7d0d); this is a consequence of
(and OK because of) the fact that 1e2072cbda0a is not alive.
